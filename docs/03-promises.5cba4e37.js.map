{"version":3,"sources":["js/03-promises.js"],"names":["refs","formEl","document","querySelector","inputDelayEl","inputStepEl","inputAmountEl","outputPromises","submitBTn","timerId","promiseCounter","countPromises","step","amount","value","time","setInterval","createPromise","then","x","console","log","catch","y","clearInterval","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","insertAdjacentHTML","concat","addEventListener","e","preventDefault"],"mappings":";AAAA,IAAMA,EAAO,CACXC,OAAQC,SAASC,cAAc,QAC/BC,aAAcF,SAASC,cAAc,uBACrCE,YAAaH,SAASC,cAAc,sBACpCG,cAAeJ,SAASC,cAAc,wBACtCI,eAAgBL,SAASC,cAAc,gBACvCK,UAAWN,SAASC,cAAc,0BAEhCM,EAAU,KACVC,EAAiB,EASrB,SAASC,EAAcC,GACrB,IAAMC,EAASb,EAAKM,cAAcQ,MAE9BC,GADUf,EAAKI,aAAaU,MAEhCL,EAAUO,YAAY,WAChBN,GAAkBG,EAKtBI,EAAcP,EAAiB,EAD/BK,GAAQH,GAELM,KAAK,SAACC,GAAC,OAAKC,QAAQC,IAAIF,KACxBG,MAAM,SAACC,GAAC,OAAKH,QAAQC,IAAIE,KAN1BC,cAAcf,IAOfG,GAGL,SAASK,EAAcQ,EAAUC,GAC/B,OAAO,IAAIC,QAAQ,SAACC,EAASC,GAC3BnB,IACA,IAAMoB,EAAgBC,KAAKC,SAAW,GACtCC,WAAW,WACT,OAAIH,GACF9B,EAAKO,eAAe2B,mBAClB,YAAWC,0BAAAA,OACeV,EAAQU,QAAAA,OAAOT,EAC1C,WACME,EAAQ,CAAEH,SAAAA,EAAUC,MAAAA,MAE3B1B,EAAKO,eAAe2B,mBAClB,YAAWC,yBAAAA,OACcV,EAAQU,QAAAA,OAAOT,EACzC,WACMG,EAAO,CAAEJ,SAAAA,EAAUC,MAAAA,MAE3BA,KAzCP1B,EAAKC,OAAOmC,iBAAiB,SAAU,SAACC,GACtCA,EAAEC,iBAGF3B,GADaX,EAAKK,YAAYS","file":"03-promises.5cba4e37.js","sourceRoot":"..\\src","sourcesContent":["const refs = {\n  formEl: document.querySelector('form'),\n  inputDelayEl: document.querySelector('input[name=\"delay\"]'),\n  inputStepEl: document.querySelector('input[name=\"step\"]'),\n  inputAmountEl: document.querySelector('input[name=\"amount\"]'),\n  outputPromises: document.querySelector('.js-promises'),\n  submitBTn: document.querySelector('button[type=\"submit\"]'),\n};\nlet timerId = null;\nlet promiseCounter = 0;\n\nrefs.formEl.addEventListener('submit', (e) => {\n  e.preventDefault();\n\n  const step = refs.inputStepEl.value;\n  countPromises(+step);\n});\n\nfunction countPromises(step) {\n  const amount = refs.inputAmountEl.value;\n  const delay = refs.inputDelayEl.value;\n  let time = +delay;\n  timerId = setInterval(() => {\n    if (promiseCounter == amount) {\n      clearInterval(timerId);\n      return;\n    }\n    time += step;\n    createPromise(promiseCounter + 1, time)\n      .then((x) => console.log(x))\n      .catch((y) => console.log(y));\n  }, step);\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    promiseCounter++;\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        refs.outputPromises.insertAdjacentHTML(\n          'beforeend',\n          `<p>✅ Fulfilled promise ${position} in ${delay}ms</p>`\n        );\n        return resolve({ position, delay });\n      } else {\n        refs.outputPromises.insertAdjacentHTML(\n          'beforeend',\n          `<p>❌ Rejected promise ${position} in ${delay}ms</p>`\n        );\n        return reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n//////------------Це код із конспекта GoIT\n\n// // Change value of isSuccess variable to call resolve or reject\n// const isSuccess = false;\n\n// const promise = new Promise((resolve, reject) => {\n//   setTimeout(() => {\n//     if (isSuccess) {\n//       resolve(\"Success! Value passed to resolve function\");\n//     } else {\n//       reject(\"Error! Error passed to reject function\");\n//     }\n//   }, 2000);s\n// });\n\n// // Will run first\n// console.log(\"Before promise.then()\");\n\n// // Registering promise callbacks\n// promise.then(\n//   // onResolve will run third or not at all\n//   value => {\n//     console.log(\"onResolve call inside promise.then()\");\n//     console.log(value); // \"Success! Value passed to resolve function\"\n//   },\n//   // onReject will run third or not at all\n//   error => {\n//     console.log(\"onReject call inside promise.then()\");\n//     console.log(error); // \"Error! Error passed to reject function\"\n//   }\n// );\n\n// // Will run second\n// console.log(\"After promise.then()\");\n"]}